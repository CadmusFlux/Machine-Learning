from sklearn.datasets import fetch_openml
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
'''
Importing Data
'''
mnist = fetch_openml('mnist_784', version=1)
X, y = mnist["data"], mnist["target"]
y = y.astype(np.uint8)
X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]

'''
    Plotting instances
'''
def plot_digit(data):
    image = data.reshape(28, 28)
    plt.imshow(image, cmap = mpl.cm.binary,
               interpolation="nearest")
    plt.axis("off")
'''
    Binary Classifier
    Label for particular digit(Binary Classifier)
'''
y_train_5 = (y_train == 5)
y_test_5 = (y_test == 5)
'''
    Random Forest Classifier
'''
from sklearn.model_selection import cross_val_predict
from sklearn.ensemble import RandomForestClassifier
forest_clf = RandomForestClassifier(n_estimators=100, random_state=42)
y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5, cv=3,
                                    method="predict_proba")
'''
    Predicting threshold based on Tpr/Fpr
    roc_auc_score outputs area under the curve
'''
y_scores_forest = y_probas_forest[:, 1] # store score of pos(is_5) class
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.metrics import precision_score, recall_score
fpr_forest, tpr_forest, thresholds_forest = roc_curve(y_train_5,
                                                      y_scores_forest)
print(roc_auc_score(y_train_5, y_scores_forest))

y_train_pred_forest = cross_val_predict(forest_clf, X_train,
                                        y_train_5, cv=3)
print(precision_score(y_train_5, y_train_pred_forest))
print(recall_score(y_train_5, y_train_pred_forest))
'''
    Multilabel Classification
'''

instance = X_train[0]
forest_clf.fit(X_train,y_train)
print(forest_clf.predict([instance]))

instance_score = forest_clf.predict_proba([instance])
print(instance_score)
